__________________
PRESENTATION FLOW


DP-What are unit tests?
DP-Advantages of Unit Testing

Demonstration		
	DP-Set up unit testing project on-the-fly to show how easy it is in VS2012

	-using DateParser
		DP-test first (mention TDD)
			-test structure
			-demonstrate S/S/R (Subject/Scenario/ResultExpected)
			-shouldn't overlap in what functionality is tested (helps maintainability)
			-edge cases
			*-there's a tendency to create tests in 'ad hoc' manner, but really should be treated as "first class", maintainable item
				-ad-hoc is ok at first, but as you see overlapping functionality, you should abstract more		
			-write implementation that breaks at first, finish
		DP-refactor that doesn't break any thing, keeping same functionality
			-abstract some things out
			-tests pass; confident that refactor didn't break anything
		>>P-making a change, showing tests break
			-show changing the way I want to parse dates
			-update tests
			-keeping each other "sturdy", push-pull
			-self documentation			

	P-Mocking & Dependency Injection: TranscriptParser
		-Mocking dependencies important to testing individual units
		-show it lend itself to Dependency Injection
		-mocking: It.IsAny<>()
		-encourages separation of concerns/good design (if it can't be tested, probably isn't a great design)
		-you can/should mock your db layer so your tests don't use the database.
		-ideally, no configuration in test projects (increases maintainability)

	-Bonus
		-find a good pattern for a repetitive test that uses random values (e.g. test executes a n different times with different random inputs)
		-to test calculation-heavy methods: randomize input values so many scenarios get tested		
			-maybe even [input random]/assert in a loop

	
	
	-first slide
		-what's the pixel size of the slide?
			-can we change it for the presentation?
				-if so, make it 1080 (or whatever resolotion of conference room tv is)
			-then adjust LA slide to match
	

PRESENTATION
use reveal.js for presentation?
	http://www.rvl.io/ is a presentation editor

ACKNOWLEDGEMENTS
	Seth, for helping me talk thru some of the issues

LINKS / REFERENCES
	Steven Sanderson's blog - Writing Great Unit Tests: Best and Worst Practices
		http://blog.stevensanderson.com/2009/08/24/writing-great-unit-tests-best-and-worst-practises/
	moq (mocking framework)
		https://github.com/Moq
