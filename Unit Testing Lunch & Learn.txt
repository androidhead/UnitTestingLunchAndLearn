
4/29
-6:35 clean up notes; vision
6:35-7:10 work on coding
7:10-7:30 look up articles on unit test evangelism
	-convincing people
7:30-8:00 code some more


__________________
Unit Testing Lunch & Learn Ideas
title/theme ideas
	-unit testing basics
	-unit testing best practices
	-sent to Dan
		Title: Introduction to Unit Testing
		Description:  Discuss the purpose of unit testing, as well as some practical techniques and best practices.

LINKS / REFERENCES
	http://blog.stevensanderson.com/2009/08/24/writing-great-unit-tests-best-and-worst-practises/


TODO
-setup VS2012 project		
	//-install github tools for vs
	//-uninstall Microsoft Web Deploy 3.0
	//-try reinstalling vs2012 update 2			
	//-set up github-connected project (hopefully github is working at this point)
	//-move wanted code from VS2010 project
	//-make sure you can create a unit test project
	//-install moq
	
//-work on outline / presentation flow
	//-think about how best to make the case that using unit tests saves a lot of dev time
	//-get overall outline complete!!!

-do smartStupidPhone project; hopefully that generates enough different testing scenarios to demonstrate the value of unit testin	
	-get rid of messages project, rename to something else (transmits or something)
	-commit

-blog post

	


TEST SCENARIOS TO TRY AND DEMONSTRATE
	-simple test, assert (for those with very little unit testing familiarity)
		MathTest.AddTwoNumbers_Basic_Success()
		-follow up with "what's the point of this" - just duplicating code
			-can test edge cases				
		-method with a complex path (e.g. different paths that log different errors)				
	-refactoring, keeping same test to ensure refactor is good
		-test may fail - that's ok, that's what its there for
		-e.g. may want to add new date formats that can be parsed.  write the tests first, see'em fail, and then fix the code.
	-testing your code without actual db present
		-(must build db layer)
	-code change (test AND code needs to change)		
	-find a good pattern for a repetitive test that uses random values (e.g. test executes a n different times with different random inputs)
	-to test calculation-heavy methods: randomize input values so many scenarios get tested		
		-maybe even [input random]/assert in a loop
	-test edge cases	
	-testing a web/wcf service with nothing to call it (simulating all the external thigns calling it)
	-catching run-time errors that you didn't know existed (maybe in an if clause that doesn't execute often)	
	-different implementations of same public interface - show that any can be "plugged-in" in place of others, as long as they pass the tests
		-show how this helps maintain clear separation
	-mocking
		-db dependency
		-other dependency		
		-partial mocking of a class (callbase, etc)
		-callback (to see what happens in a called class)
	?-show writing test BEFORE method				
	-demonstrate good naming conventions and BAD naming conventions for unit test methods

-create a time-line for the next 3 weeks to ensure progress
	-include time to get presentation working (using http://www.rvl.io/)

-create a dummy db layer (or something that can be mocked)
-mock dummy db layer to test proper installation of moq
	-SquareManager
	-Square
	-A DataContext class which will have SquareManager, other managers as a property
	
-show setting up a unit test project?

-set up slides
	-get the official LA slide going, make sure you can publish the presentation
		-C:\Users\andrewb\Documents\Training\UnitTestingLL\
	-implement outline
	
public class TranscriptParser




REFACTORS
-refactor return message - instead of returning null on fail, return meaningful message



__________________
PRESENTATION FLOW
-What are unit tests?
	*-a way to test the fundamental pieces of your code to make sure they are behaving as expected
	-less about finding bugs, more about preventing them (cite: Seth)
	
-Why do unit tests?
	-Saves time and money when done right
		-though costs significant time at the beginning, good tests can save even more time in long run
		-test every possible path (especially useful if there's multiple error paths, which could happen even in a simple method)
		-helps test edge cases (which typically go untested until live)
		-improves overall quality
			-especially if you use Gated checkins
		-helps design (easier to see how parts fit together if you know what each one does)				
		-helps to maintain separation of concerns
			-helps you think of your code as discrete, well-defined parts
			-if something can't be unit tested, it probably should be refactored with better separation
		-improves reliability of refactoring	
			-essential for Agile where quick/reliable refactoring is necessary
	-allows you solidify design in code before coding actual funcionality
	-makes everyone more confident in their code
	-foundational to TDD, which really saves time
	-helps maintenance of product (write a test when you find a qa error.  then you can be certain that problem never happens again)
	-push-pull relationship between unit tests and functionality - unit tests make sure code works, code makes sure unit tests work (they make each other "sturdy")	
		(note: make sure there is a test to show this)
		-in the process, this kind of self-documents code
	-in my opinion, makes development more fun
	

-Set up unit testing project on-the-fly to show how easy it is in VS2012
	-have project just be a bunch of stubs in a class library

-Examples of how unit tests saved me time (intermixed with best practices)
	-



		

________________
TECHNIQUES, EXAMPLES, BEST PRACTICES
-Best practices (cite:http://blog.stevensanderson.com/2009/08/24/writing-great-unit-tests-best-and-worst-practises/)
	-a unit test should usually only test one thing
	-Naming Conventions
		-S/S/R (Subject/Scenario/ResultExpected)
	-demonstrate ease of refactoring with unit tests	
	-orthogonal (use different word choice) : shouldn't overlap in what functionality is tested
		-this improves maintainability of your tests, among other things

-Mocking & Dependency Injection
	-Dependency Injection allows you to mock dependencies easily
	-MockObject.Callbase = true (mocking only part of a class) -- good for mocking methods in the same class that you are testing!
	-using "virtual" keyword to make methods overridable for mocking VS doing it the longer way (interfaces)
	-good way to demonstrate dependency injection
	-It.IsAny<>() and other such helpful "shortcuts"
	-trick to allow subsequent calls to something return different results ("ReturnsInOrder")

-Test Driven Development
-write simple app to demonstrate TDD, focusing on the testing part.
	-or maybe don't write any of the working code, just write the test.		
	-the app does a bunch of complex string parsing
		-break the app, see the unit tests break					
-demonstrate than an un-unittestable design probably isn't a good one
-debate:  should you test private methods?
	-I say that you SHOULD in the right case, because a private method to one design may be a public method to another.
		-bottom line, will it save you time later?  If so, you should test that private method.






TEST PROJECT
-text parsing
	-this would be easy to test multiple implementations while showing same tests pass for each implementation

-this is more of a test scenario than a complete project
	-multiple, complex validations
	-when you change the behavior of one, tests make sure that rest don't break
	-(think about Order validations for CCBCC, how id-code translation made it difficult)

-image processor for lego/pixel art?
	-each pixel as a specific lego-color brick
		-will have to "round" each pixel to the nearest lego color
			-find standard lego colors (verify these colors exist and are available first)			
				-maybe have a method / service call to do this
	-types of bricks (allow 1x1, 2x1, 2x2  bricks, or maybe just 1x1 to start)
	-number of bricks of each color/size combo 
		-use this to calculate weight of each of these bricks (in the case of buying by weight)

-"text-based smart phone" application (adds list items to list in the cloud (e.g. google documents), also retrieves them)
	-CAN JOKE ABOUT IT BEING LIKE A SMART PHONE
		-"APPS"
		-GAMES TEXT-BASED ANGRY BIRDS (OVER-SIMPLIFIED)
		-PORN - HAVE IT SEND BACK A SILLY IMAGE
	-maybe have it compatible with different things in the cloud - Google docs, misc cloud storage, etc
	-show evolution of project from simple to complex (TDD/agile it aaaaalll out)
	
		
(*-come up with a full design first and do TDD)

"D:\CCBCC\Ccbcc.QueueManagement.Service\bin\Ccbcc.QueueManagement.Service.exe"

REFERENCES
Steven Sanderson's blog - Writing Great Unit Tests: Best and Worst Practices
	http://blog.stevensanderson.com/2009/08/24/writing-great-unit-tests-best-and-worst-practises/


PRESENTATION
use reveal.js for presentation?
	http://www.rvl.io/ is a presentation editor
	
	
ACKNOLEDGEMENTS
Seth, for helping me talk thru some of the issues